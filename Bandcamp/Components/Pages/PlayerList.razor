@using Bandcamp.Models;
@using System.Diagnostics;
@using Bandcamp.Stores;
@using Bandcamp.Services;
@using Bandcamp.Components.Common;
@using Bandcamp.Utils;
@using System.Linq;

@inject GlobalStore globalStore;
@inject ApplicationService applicationService;
@inject StreamStore streamStore;
@inject Utilities applicationUtils;

@page "/"
<div class="relative w-full h-full overflow-y-auto bg-linear-to-r/oklch from-gray-50 to-gray-100">
    <div class="w-full sticky top-0 left-0 shadow-lg">
        <p class="px-2 pb-2 text-sm text-teal-900">Seleccione hasta 5 generos para crear una lista de reproducción personalizada</p>
        <SelectorGenres DefaultAction="ActionDefaultSelectorGenres" DefaultActionPlayList="StartPlayList"></SelectorGenres>
    </div>
    <div class="relative px-2 w-full bg-linear-to-r/oklch from-gray-50 to-gray-100 pb-20 pt-3 h-auto grid grid-cols-5 gap-x-4 gap-y-4">

        @foreach (var itemSong in globalStore.GetResponseIndexDiscoverPlayerList().results.Select((item, index) => new { item, index }))
        {
            <Song ValueItemSong="itemSong.item" IndexItem="itemSong.index+1" DefaultAction="DefaultActionInSong"></Song>
        }

        <div class="col-span-5 bg-linear-to-r/oklch from-gray-50 to-gray-100 w-full h-[100px] space-y-1 mt-1">

            @if (!IsLoading && globalStore.GetResponseIndexDiscoverPlayerList().results.Count()>0)
            {
                <button @onclick="ActionDefaultSelectorGenres" class="bg-white px-4 w-full col-span-5 cursor-pointer h-10 text-teal-900 hover:text-teal-600 rounded border border-gray-200">
                    Ver más resultados
                </button>
            }

            @if(IsLoading){
                <div class="col-span-5 w-full text-teal-900 flex items-center">
                    <div class="mx-auto">
                        <span class="loader"></span>
                    </div>

                </div>
            }

        </div>
    </div>
</div>

@code {
    public bool IsLoading { get; set; } = false;

    async protected override Task OnInitializedAsync()
    {

        if (globalStore.GetResponseIndexDiscoverPlayerList().results.Count == 0)
        {
            await GetMoreDefaultResults();
        }

    }

    async Task GetMoreDefaultResults()
    {
        IsLoading = true;
        await applicationService.IndexDiscover(globalStore.AddRangeResultDiscoverPlayerList, globalStore.GetResponseIndexDiscoverPlayerList().cursor, [], 60);
        IsLoading = false;
        StateHasChanged();
    }

    async public Task DefaultActionInSong(ItemSong ValueItemSong)
    {
        if (ValueItemSong.result_type == "a")
        {
            applicationUtils.SetItemSongCustom(ValueItemSong);
        }
    }

    async public Task ActionDefaultSelectorGenres()
    {
        // limite de 900 items a mostrar en interfaz
        if (globalStore.GetResponseIndexDiscoverPlayerList().results.Count() >= 900)
        {
            return;
        }

        if (globalStore.GetResponseIndexDiscoverPlayerList().cursor == "*")
        {
            globalStore.GetResponseIndexDiscoverPlayerList().results = [];
        }

        IsLoading = true;
        await applicationService.IndexDiscover(globalStore.AddRangeResultDiscoverPlayerList, globalStore.GetResponseIndexDiscoverPlayerList().cursor, globalStore.ListGenres, 60);
        IsLoading = false;
        StateHasChanged();
    }

    public void StartPlayList()
    {
        applicationUtils.StartPlayList();
    }

}
